import { S3Client, PutObjectCommand } from "@aws-sdk/client-s3";
import { connectToDatabase } from "./db";
import "dotenv/config";
import formidable from "formidable";
import fs from "fs";
import { NodeHttpHandler } from "@aws-sdk/node-http-handler";

// Настройка клиента S3 с увеличенными таймаутами
const s3Client = new S3Client({
  region: process.env.AWS_REGION,
  credentials: {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
  },
  endpoint: "https://s3.timeweb.cloud", // Используем https
  forcePathStyle: true, // Принудительное использование path-style URL
  requestHandler: new NodeHttpHandler({
    connectionTimeout: 300000, // 5 минут таймаут на подключение
    socketTimeout: 300000, // 5 минут таймаут на сокеты
  }),
  maxAttempts: 5, // Увеличенное количество попыток
});

export default defineEventHandler(async (event) => {
  try {
    // Парсинг формы
    const form = formidable({ multiples: true }); // Разрешаем множественные файлы

    const { fields, files } = await new Promise((resolve, reject) => {
      form.parse(event.node.req, (err, fields, files) => {
        if (err) reject(err);
        else resolve({ fields, files });
      });
    });

    console.log("Получены поля формы:", fields);
    console.log("Получены файлы:", files);

    // Извлечение полей формы и преобразование массивов в строки
    const alias = Array.isArray(fields.alias) ? fields.alias[0] : fields.alias;
    const name = Array.isArray(fields.name) ? fields.name[0] : fields.name;
    const sku = Array.isArray(fields.sku) ? fields.sku[0] : fields.sku;
    const description = Array.isArray(fields.description)
      ? fields.description[0]
      : fields.description;
    const short_description = Array.isArray(fields.short_description)
      ? fields.short_description[0]
      : fields.short_description;
    const price = Array.isArray(fields.price)
      ? parseFloat(fields.price[0])
      : parseFloat(fields.price);
    const category = Array.isArray(fields.category)
      ? parseInt(fields.category[0])
      : parseInt(fields.category);
    const flags = fields.flags || {};

    const db = await connectToDatabase();
    const productsCollection = db.collection("products");

    const currentDate = new Date();

    let s3ImageUrl = "";
    const alternativeImagesUrls = [];

    // Основное изображение
    if (files.image) {
      const imageFile = Array.isArray(files.image)
        ? files.image[0]
        : files.image;

      if (imageFile && imageFile.filepath) {
        try {
          const imageData = fs.readFileSync(imageFile.filepath);
          console.log("Файл успешно прочитан:", imageFile.originalFilename);
          console.log("Размер файла:", imageData.length);

          // Путь для основного изображения
          const mainImageName = `main.jpg`; // Имя файла для основного изображения
          const mainImagePath = `product-images/${alias}/${mainImageName}`;

          // Параметры для загрузки в S3
          const command = new PutObjectCommand({
            Bucket: process.env.AWS_S3_BUCKET,
            Key: mainImagePath, // Путь внутри бакета
            Body: imageData,
            ContentType: imageFile.mimetype,
          });

          console.log(
            "Начинаем загрузку основного изображения в S3 с параметрами:",
            command.input
          );

          // Загрузка в S3
          const uploadResult = await s3Client.send(command);

          console.log(
            "Основное изображение успешно загружено в S3:",
            uploadResult
          );

          // Формирование ссылки на загруженное изображение
          s3ImageUrl = `https://s3.timeweb.cloud/${process.env.AWS_S3_BUCKET}/product-images/${alias}/main.jpg`;
        } catch (error) {
          console.error(
            "Ошибка при загрузке основного изображения в S3 (детальная):",
            error
          );
          throw new Error(
            `Не удалось загрузить основное изображение в S3: ${error.message}`
          );
        } finally {
          // Удаление временного файла
          fs.unlink(imageFile.filepath, (err) => {
            if (err)
              console.error("Ошибка при удалении временного файла:", err);
            else console.log("Временный файл успешно удален");
          });
        }
      } else {
        throw new Error(
          "Файл основного изображения не найден или путь не определен"
        );
      }
    }

    // Альтернативные изображения
    if (files.alternative_images) {
      const altImages = Array.isArray(files.alternative_images)
        ? files.alternative_images
        : [files.alternative_images];

      for (let index = 0; index < altImages.length; index++) {
        const altImage = altImages[index];
        if (altImage && altImage.filepath) {
          try {
            const altImageData = fs.readFileSync(altImage.filepath);
            console.log("Файл успешно прочитан:", altImage.originalFilename);
            console.log("Размер файла:", altImageData.length);

            // Путь для альтернативного изображения
            const altImageName = `sub-image-${index + 1}.jpg`; // Имя для альтернативного изображения
            const altImagePath = `product-images/${alias}/${altImageName}`;

            // Параметры для загрузки в S3
            const altCommand = new PutObjectCommand({
              Bucket: process.env.AWS_S3_BUCKET,
              Key: altImagePath, // Путь внутри бакета
              Body: altImageData,
              ContentType: altImage.mimetype,
            });

            console.log(
              "Начинаем загрузку альтернативного изображения в S3 с параметрами:",
              altCommand.input
            );

            // Загрузка в S3
            const altUploadResult = await s3Client.send(altCommand);

            console.log(
              "Альтернативное изображение успешно загружено в S3:",
              altUploadResult
            );

            // Формирование ссылки на загруженное альтернативное изображение
            const altImageUrl = `https://s3.timeweb.cloud/${
              process.env.AWS_S3_BUCKET
            }/product-images/${alias}/sub-image-${index + 1}.jpg`;
            alternativeImagesUrls.push(altImageUrl);
          } catch (error) {
            console.error(
              "Ошибка при загрузке альтернативного изображения в S3:",
              error
            );
            throw new Error(
              `Не удалось загрузить альтернативное изображение в S3: ${error.message}`
            );
          } finally {
            // Удаление временного файла
            fs.unlink(altImage.filepath, (err) => {
              if (err)
                console.error("Ошибка при удалении временного файла:", err);
              else console.log("Временный файл успешно удален");
            });
          }
        } else {
          throw new Error(
            "Файл альтернативного изображения не найден или путь не определен"
          );
        }
      }
    }

    // Подготовка данных продукта для записи в БД
    const productData = {
      image_url: s3ImageUrl,
      alternative_images: alternativeImagesUrls, // Массив с альтернативными изображениями
      alias,
      name,
      sku,
      description,
      short_description,
      price,
      category,
      flags: {
        disable: flags?.disable || "false",
      },
      created_at: currentDate,
      updated_at: currentDate,
    };

    console.log("Данные продукта для сохранения в БД:", productData);

    // Сохранение продукта в БД
    const productResult = await productsCollection.insertOne(productData);
    console.log(
      "Продукт успешно сохранен в БД с ID:",
      productResult.insertedId
    );

    // Возвращаем успешный результат
    return { success: true, productId: productResult.insertedId };
  } catch (error) {
    console.error("Ошибка при обработке запроса:", error);
    return { success: false, error: error.message };
  }
});